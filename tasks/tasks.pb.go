// Code generated by protoc-gen-go.
// source: tasks.proto
// DO NOT EDIT!

/*
Package tasks is a generated protocol buffer package.

It is generated from these files:
	tasks.proto

It has these top-level messages:
	ListRequest
	ListResponse
	Task
*/
package tasks

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type ListRequest struct {
	Skip int32    `protobuf:"varint,1,opt,name=skip" json:"skip,omitempty"`
	Take int32    `protobuf:"varint,2,opt,name=take" json:"take,omitempty"`
	Sort []string `protobuf:"bytes,3,rep,name=sort" json:"sort,omitempty"`
}

func (m *ListRequest) Reset()         { *m = ListRequest{} }
func (m *ListRequest) String() string { return proto.CompactTextString(m) }
func (*ListRequest) ProtoMessage()    {}

type ListResponse struct {
	Total int32   `protobuf:"varint,1,opt,name=total" json:"total,omitempty"`
	Tasks []*Task `protobuf:"bytes,2,rep,name=tasks" json:"tasks,omitempty"`
}

func (m *ListResponse) Reset()         { *m = ListResponse{} }
func (m *ListResponse) String() string { return proto.CompactTextString(m) }
func (*ListResponse) ProtoMessage()    {}

func (m *ListResponse) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

type Task struct {
	Id   int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}

func init() {
}

// Client API for Service service

type ServiceClient interface {
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
}

type serviceClient struct {
	cc *grpc.ClientConn
}

func NewServiceClient(cc *grpc.ClientConn) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := grpc.Invoke(ctx, "/tasks.Service/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Service service

type ServiceServer interface {
	List(context.Context, *ListRequest) (*ListResponse, error)
}

func RegisterServiceServer(s *grpc.Server, srv ServiceServer) {
	s.RegisterService(&_Service_serviceDesc, srv)
}

func _Service_List_Handler(srv interface{}, ctx context.Context, buf []byte) (proto.Message, error) {
	in := new(ListRequest)
	if err := proto.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(ServiceServer).List(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tasks.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Service_List_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
